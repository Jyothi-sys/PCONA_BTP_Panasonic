PROCEDURE "VALIDATE_AND_REPLICATE_FACTORYINVOICE"(IN V_IMPORTSHIPMENTNUMBER NVARCHAR(30),IN V_IMPORTEROFRECORD NVARCHAR(10),IN V_BOL NVARCHAR(30), IN V_BOLID INTEGER, OUT V_STATUS NVARCHAR(30))
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   --Feb 10th 2024
   --Added Logic for Replicating Invoiceheader, Invoice Line and Invoice Additional Line when MNET File is received for an ETA change. When BOL Change is received, it will flag an error if no invoice header or line precedes it.
   --Feb 14th 2024
   --Fixed issue with data insert error.
   --Feb 15th 2024 .. further revisions to insert sql.    Also set "Action" in Invoiceline and additional line to 'M'
   --Feb 17th 2024 .. Previous change for getting last record that does not NULL IBD Number causes issues with Price changes. So Logic
   --changed. First insert will take place for latest record for Invoice Line. following this there will be an update on invoice line 
   --for BTP_IBDNUMBER AND BTP_IBDACTION AND BTP_IBD_STATUS from latest non-null IBD Document.
   --Feb 20th 2024 (Defect206part3a) Fix for BOL Change made so that process follows same as ETA change
   --Feb 23rd 2024 (Defect206part3a) Uncommented code for update for BOLChange flag.
   --Feb 29th 2024 (Defect206part3b) Updating MecaOrderNumber and OrderItemnbr on InvoiceLine table to match data sent by Factory in Additional invoice line.
   -- May 16 2024 (Defect 91) The Procedure is returning NULL, when Factory sends BOLChange or ETAChange with a full payload. Fix put in to return Value. Also cleaned up code.
   -- June 12 2024 (Defect 43b- SIT3) The ETA and BOL change with Payload is not getting processed in same manner as when BOLHeader is being sent.. this is because the IBD, GR, ASN and associated values are not getting updated.
   -- July 7 2024 (SIT3Optimization) Replaced Count(*) statements with combination of Exists an select top 1 sql. Cleansed up old commented code.
   
	AS
	BEGIN
	
		Declare V_FLAG_BOLCNT BOOLEAN;				--SIT3Optimization  Replaced variable V_BOLCNT with a boolean, also removed initialization.
		Declare V_PREV_BOLCNT INTEGER;
		
		Declare V_PREV_BOLID INTEGER;
		Declare V_FLAG_INVCNT BOOLEAN;			--SIT3Optimization  Replaced variable V_INVCNT with a boolean, also removed initialization.
		Declare V_FLAG_INVLINECNT BOOLEAN;			--SIT3Optimization  Replaced variable V_INVLINECNT with a boolean, also removed initialization.
		Declare V_FLAG_INVADDLINECNT BOOLEAN;		--SIT3Optimization  Replaced variable V_INVADDLINECNT with a boolean, also removed initialization.
		-- Declare V_PREV_INITIAL_ETACNT INTEGER;	--SIT3Optimization  Replaced variable its initialization and replaced with if - then construct

		Declare V_BOLACT NVARCHAR(1);
		Declare V_INVACT NVARCHAR(1);
		DECLARE V_INVLINEACT NVARCHAR(1);
		DECLARE V_PREV_BOLNUM NVARCHAR(20);
		DECLARE V_HOLD_BOLNUM NVARCHAR(20);				-- Defect 206part3.n
		DECLARE V_FLAG_BOLCHANGE BOOLEAN;				-- Defect 206part3a.n
		-- Declare V_ORDERITEMCNT INTEGER;				-- Defect 206part3b.n
		
		DECLARE V_INITIAL_ETA DATE;
		DECLARE V_PREV_INITIAL_ETA DATE;
		--DECLARE MYCOND CONDITION FOR SQL_ERROR_CODE 10001;
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
			V_STATUS = 'READY';					-- There will be no record to replicate when full payload is sent. This error may only occur if no data is found to replicate.
		BEGIN 

		END;
		   
	   -- Initialized Variables	
	   V_PREV_BOLCNT = 0;
	  -- V_BOLCNT = 0;									--SIT3Optimization
	  -- V_INVCNT = 0;									--SIT3Optimization
	  -- V_INVLINECNT = 0;								--SIT3Optimization
	  -- V_INVADDLINECNT = 0;							--SIT3Optimization
	  -- V_ORDERITEMCNT = 0;							-- Defect 206part3b.n
	   
	   V_BOLACT = '';
	   V_INVACT = '';
	   V_INVLINEACT = '';
	   V_PREV_BOLNUM = '';
	   V_HOLD_BOLNUM = V_BOL;							-- Defect 206part3.n
	   V_FLAG_BOLCHANGE = FALSE;						-- Defect 206part3a.n
  
	   /* SIT3OPTIMIZATION
	   SELECT COUNT(ID) INTO V_BOLCNT from BTP_PANASONIC_BOLHeader as A 
	   WHERE A.ImportShipmentNumber = V_IMPORTSHIPMENTNUMBER
	   AND A.HouseBolNumber =  V_BOL; 

	   Select COUNT(ID) INTO V_PREV_BOLCNT 
	   FROM BTP_PANASONIC_BOLHeader as A 
	   WHERE  A.ImportShipmentNumber = V_IMPORTSHIPMENTNUMBER 
	 --	AND A.ID != V_BOLID;	-- Defect 206part3.o
		AND A.ID < V_BOLID;		-- Defect 206part3.n Bolid is sequential, and we are looking for prev BOLID.

	   -- Defect 206part3b.sn  Updating Invoiceline MECAORDERNBR and ORDERITEMNBR to match the information sent by the Factory so that downstream processing can occur.

	   SELECT COUNT(G.PARTID_INVOICENUMBER_INVOICENUMBER) INTO V_ORDERITEMCNT
		  FROM BTP_PANASONIC_ADDITIONALINVOICELINE as G
		  WHERE G.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER= V_BOL	 									
	   AND G.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_ID = V_BOLID
	   AND IFNULL(G.MECAORDERNBR, 'X') != 'X'
	   AND IFNULL(G.ORDERITEMNBR, 'X') != 'X';    
	   IF (V_ORDERITEMCNT > 0) THEN             */--SIT3Optimization

	   -- SIT3 Optimization Replacing Count(*) 

	   IF EXISTS (SELECT TOP 1 A.ID from BTP_PANASONIC_BOLHeader as A 
	   			   WHERE A.ImportShipmentNumber = V_IMPORTSHIPMENTNUMBER
	   			    AND A.HouseBolNumber =  V_BOL ) THEN

			V_FLAG_BOLCNT = TRUE;
	   ELSE
	   		V_FLAG_BOLCNT = FALSE;
	   END IF;										-- SIT3Optimization
	   
	   IF EXISTS ( SELECT TOP 1 G.PARTID_INVOICENUMBER_INVOICENUMBER
		  FROM BTP_PANASONIC_ADDITIONALINVOICELINE as G
		  WHERE G.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER= V_BOL	 									
	   		AND G.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_ID = V_BOLID
	   		AND IFNULL(G.MECAORDERNBR, 'X') != 'X'
	   		AND IFNULL(G.ORDERITEMNBR, 'X') != 'X'
	      ) 
	     THEN
	       BEGIN
			   DECLARE CURSOR C_ADDITIONALINVOICELINE FOR	
			   SELECT G.PARTID_INVOICENUMBER_INVOICENUMBER, G.PARTID_LINENUMBER, G.PARTID_PARTID, G.MECAORDERNBR, G.ORDERITEMNBR
			   FROM BTP_PANASONIC_ADDITIONALINVOICELINE as G
			   WHERE G.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER= V_BOL	 									
				   AND G.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_ID = V_BOLID
				   AND IFNULL(G.MECAORDERNBR, 'X') != 'X'
				   AND IFNULL(G.ORDERITEMNBR, 'X') != 'X';
								 
				   FOR	cur_row AS C_ADDITIONALINVOICELINE
				   DO
					   UPDATE BTP_PANASONIC_INVOICELINE AS B
					   SET B.MECAORDERNBR = cur_row.MECAORDERNBR,
						   B.ORDERITEMNBR = cur_row.ORDERITEMNBR			
						   WHERE B.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_BOL
						   AND B.INVOICENUMBER_HOUSEBOLNUMBER_ID = V_BOLID
						   AND B.INVOICENUMBER_INVOICENUMBER = cur_row.PARTID_INVOICENUMBER_INVOICENUMBER
						   AND B.LINENUMBER = cur_row.PARTID_LINENUMBER
						   AND B.PARTID = cur_row.PARTID_PARTID; 		

				   END FOR;
		   END;
	   END IF;		-- Defect 206part3b.en

	   --IF V_PREV_BOLCNT > 0 then			--SIT3Optimization
	   IF EXISTS ( Select TOP 1 A.ID 
	   				FROM BTP_PANASONIC_BOLHeader as A 
	   				WHERE A.ImportShipmentNumber = V_IMPORTSHIPMENTNUMBER 
					AND A.ID < V_BOLID		-- Defect 206part3.n Bolid is sequential, and we are looking for prev BOLID.
	    ) THEN								--SIT3Optimization
			   SELECT Max(ID) INTO V_PREV_BOLID 
			   FROM BTP_PANASONIC_BOLHeader as A 
			   WHERE  A.ImportShipmentNumber = V_IMPORTSHIPMENTNUMBER 
	     -- 		AND A.ID != V_BOLID; -- Defect 206part3.o
			   AND A.ID < V_BOLID;  -- Defect 206part3.n Bolid is sequential, and we are looking for prev BOLID.
			
			   SELECT A.HouseBolNumber INTO V_PREV_BOLNUM 
			   FROM BTP_PANASONIC_BOLHeader as A 
			   WHERE  A.ImportShipmentNumber = V_IMPORTSHIPMENTNUMBER 
			   AND A.ID = V_PREV_BOLID;
			   
			   V_HOLD_BOLNUM = V_PREV_BOLNUM; 				--  Defect 206part3.n
			   
			   /*SELECT COUNT(A.INITIALDESTINATIONETA) INTO V_PREV_INITIAL_ETACNT   -- SIT3Optimization Replace Count and variable with more efficient construct
			   FROM BTP_PANASONIC_BOLHeader as A 
			   WHERE  A.ImportShipmentNumber = V_IMPORTSHIPMENTNUMBER 
			   AND A.HouseBolNumber =  V_BOL 
			   AND A.ID = V_PREV_BOLID;	

			   IF V_PREV_INITIAL_ETACNT > 0 then */ -- SIT3Optimization

			   IF EXISTS (SELECT TOP 1 A.INITIALDESTINATIONETA 
			   				FROM BTP_PANASONIC_BOLHeader as A 
			   				WHERE  A.ImportShipmentNumber = V_IMPORTSHIPMENTNUMBER 
			   				AND A.HouseBolNumber =  V_BOL 
			   				AND A.ID = V_PREV_BOLID
			   ) THEN								-- SIT3Optimization
				   SELECT A.INITIALDESTINATIONETA INTO V_PREV_INITIAL_ETA FROM BTP_PANASONIC_BOLHeader as A 
				   WHERE  A.ImportShipmentNumber = V_IMPORTSHIPMENTNUMBER 
				   AND A.HouseBolNumber =  V_BOL 
				   AND A.ID = V_PREV_BOLID;
			   ELSE
				   V_PREV_INITIAL_ETA = '';
			   END IF;
	   ELSE
			   V_PREV_BOLID = 0;
			 --    V_PREV_BOLNUM = '';
			   V_PREV_BOLNUM = V_BOL;         -- Defect 47.n
			   V_HOLD_BOLNUM = V_BOL;		    -- Defect 206part3.n
	   END IF;
	   
	   /* --SIT3Optimization
	   SELECT COUNT(DISTINCT B.INVOICENUMBER)into V_INVCNT 
	   FROM BTP_PANASONIC_INVOICEHEADER as B, BTP_PANASONIC_BOLHeader as A
	   WHERE B.HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_BOL
	   AND A.ImportShipmentNumber = V_IMPORTSHIPMENTNUMBER
	   AND A.HouseBolNumber =  B.HOUSEBOLNUMBER_HOUSEBOLNUMBER	
	   AND B.HOUSEBOLNUMBER_ID = V_BOLID;
	
	   SELECT COUNT(DISTINCT C.LINENUMBER)into V_INVLINECNT 
	   FROM BTP_PANASONIC_INVOICELINE as C, BTP_PANASONIC_BOLHeader as A
	   WHERE C.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_BOL
	   AND A.ImportShipmentNumber = V_IMPORTSHIPMENTNUMBER
	   AND A.HouseBolNumber = C.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER
	   AND C.INVOICENUMBER_HOUSEBOLNUMBER_ID = V_BOLID;
			
	   SELECT COUNT(DISTINCT D.PARTID_LINENUMBER)into V_INVADDLINECNT 
	   FROM BTP_PANASONIC_ADDITIONALINVOICELINE as D, BTP_PANASONIC_BOLHeader as A
	   WHERE D.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_BOL
	   AND A.ImportShipmentNumber = V_IMPORTSHIPMENTNUMBER
	   AND A.HouseBolNumber =  D.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER
	   AND D.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_ID = V_BOLID; */

       -- SIT3 Optimization Replacing Count(*) 
	   IF EXISTS ( SELECT TOP 1 B.INVOICENUMBER  
	   			   	FROM BTP_PANASONIC_INVOICEHEADER as B, BTP_PANASONIC_BOLHeader as A
	   				WHERE B.HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_BOL
	   				AND A.ImportShipmentNumber = V_IMPORTSHIPMENTNUMBER
	   				AND A.HouseBolNumber =  B.HOUSEBOLNUMBER_HOUSEBOLNUMBER	
	   				AND B.HOUSEBOLNUMBER_ID = V_BOLID
		   ) THEN
			
			V_FLAG_INVCNT = TRUE;
	   ELSE
	   		V_FLAG_INVCNT = FALSE;
	   END IF;

	   IF EXISTS ( SELECT TOP 1 C.LINENUMBER 
	   				FROM BTP_PANASONIC_INVOICELINE as C, BTP_PANASONIC_BOLHeader as A
	   				WHERE C.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_BOL
	  				 AND A.ImportShipmentNumber = V_IMPORTSHIPMENTNUMBER
	   				 AND A.HouseBolNumber = C.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER
	   				 AND C.INVOICENUMBER_HOUSEBOLNUMBER_ID = V_BOLID 
		  ) THEN

			V_FLAG_INVLINECNT = TRUE;
	    ELSE
	   		V_FLAG_INVLINECNT = FALSE;
	   END IF;
	   
	   IF EXISTS ( SELECT TOP 1 D.PARTID_LINENUMBER 
	   			  FROM BTP_PANASONIC_ADDITIONALINVOICELINE as D, BTP_PANASONIC_BOLHeader as A
	   			  WHERE D.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_BOL
	  			  AND A.ImportShipmentNumber = V_IMPORTSHIPMENTNUMBER
	   			  AND A.HouseBolNumber =  D.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER
	   			  AND D.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_ID = V_BOLID 
		   ) THEN
		
			V_FLAG_INVADDLINECNT = TRUE;
	    ELSE
	   		V_FLAG_INVADDLINECNT = FALSE;
	   END IF;

	   IF (V_FLAG_BOLCNT = TRUE) THEN

		   SELECT ACTION INTO V_BOLACT 
		   FROM BTP_PANASONIC_BOLHeader as A 
		   WHERE  A.ImportShipmentNumber = V_IMPORTSHIPMENTNUMBER 
		   AND A.HouseBolNumber = V_BOL
		   AND A.ID = V_BOLID;

	     /* Defect 206part3.so -- Below commented code is just kept as example for posterity for raising error. Code has been commented as its not needed		 
		   IF ( V_INVCNT = 0 and V_PREV_BOLNUM = V_BOL ) THEN
			   IF ( V_BOLACT = 'M') THEN
				   V_STATUS = 'ERROR';
				   SIGNAL MYCOND SET MESSAGE_TEXT = 'BOL WITH ACTION M DOESNOT HAVE DETAILS RESEND FULL DATA TRANSMISSION';
				-- There is a BOL change on Header with no details.Transmission needs to be sent with all details.
			   END IF;
		   END IF; 					*/ -- Defect 206part3.eo

		   IF ( V_BOLACT = 'M') THEN
			   IF (V_PREV_BOLNUM != V_BOL) THEN
				   UPDATE BTP_PANASONIC_BOLHEADER
				   SET FLAG_BOLCHANGE = TRUE
				   WHERE BTP_PANASONIC_BOLHEADER.ImportShipmentNumber = V_IMPORTSHIPMENTNUMBER
				   AND BTP_PANASONIC_BOLHEADER.HouseBolNumber =  V_BOL;
				   V_FLAG_BOLCHANGE = TRUE;		-- Defect 206part3a.n
			   END IF; 	
		   END IF; 	

	   END IF; -- Defect 206part3.n

			-- Following Logic is valid only when BOLHeader was being sent 
			-- There exists atleast One BOL ie this BOLHeader is for ETA change 
			-- if InitialETA on current record differs from Previous record.
			-- Read ETA Date from BOLHEADER for V_PREV_BOLID and compare with
			-- V_BOLID and if they are different THEN it is a ETA Change... 
			-- Replicate InvoiceHeader and Lines 
			-- ELSE it is an Exception...	
			-- Check if Flag_BOLCHANGE = TRUE for ID = V_PREV_BOLID. 
			-- IF Flag_BOLCHANGE = FALSE THEN Check if Invoice Header exists 
			-- for Previous BOLID and 
			-- if there is no INVOICELINE then Raise Exception. 
			-- if there is no INVOICEHEADER raise exception.
					
	   SELECT A.INITIALDESTINATIONETA INTO V_INITIAL_ETA FROM BTP_PANASONIC_BOLHeader as A 
	   WHERE  A.ImportShipmentNumber = V_IMPORTSHIPMENTNUMBER 
	   AND A.HouseBolNumber =  V_BOL 
	   AND A.ID = V_BOLID;
									
			-- Read ETA Date from BOLHEADER for V_PREV_BOLID and compare with
			-- V_BOLID and if they are different THEN it is a ETA Change... 
			-- Replicate InvoiceHeader and Lines 

	        --Defect 206part3.o		IF ((V_INITIAL_ETA != V_PREV_INITIAL_ETA ) AND (V_BOL = V_PREV_BOLNUM)) THEN
	   IF (((V_INITIAL_ETA != V_PREV_INITIAL_ETA ) AND (V_BOL = V_PREV_BOLNUM)) OR
		   ( v_bol <> V_PREV_BOLNUM ))	THEN	--Defect 206part3.n

			   -- IF ( V_INVCNT = 0 ) THEN  -- SIT3Optimization
			   IF ( V_FLAG_INVCNT = FALSE ) THEN  -- SIT3Optimization
				   INSERT INTO BTP_PANASONIC_INVOICEHEADER
				   SELECT
					     --  jyothi changed for 206
						 cast(( 	case B.ACTION
							   when
								   'A'	then 'M'
							   else
								   B.ACTION
							   end ) AS NVARCHAR(1)
							),
   						B.INVOICENUMBER,
						(SELECT A.ID from BTP_PANASONIC_BOLHEADER AS A WHERE A.ID = V_BOLID),
						(SELECT A.HOUSEBOLNUMBER from BTP_PANASONIC_BOLHEADER AS A WHERE A.ID = V_BOLID AND A.HouseBolNumber = V_BOL), -- defect206part3.n										
						B.SHIPPERREFERENCENUMBER,
						B.IMPORTERREFERENCENUMBER,
						B.ADDITIONALINVOICENUMBER,
						B.INVOICETYPE,
						B.BILLTOID,
						B.SUPPLIERID,
						B.INVOICECURRENCYCODE,
						B.CONTRACTEXCHANGERATE,
						B.INVOICEAMOUNT,
						B.INVOICEGROSSWEIGHT,
						B.INVOICENETWEIGHT,
						B.NUMBEROFPALLETS,
						B.NUMBEROFCARTONS,
						B.NUMBEROFCONTAINERS,
						B.NUMBEROFCRATES,
						B.NUMBEROFOTHERPACKAGE,
						B.TRANSMETHODCODE,
						B.INVOICEQUANTITYORPIECES,
						B.PURCHASEORDERNUMBER,
						B.INVOICEVOLUME,
						B.ADJUSTMENTNAME,
						B.ADJUSTMENTPRICE,
						B.ADJUSTMENTNAME2,
						B.ADJUSTMENTPRICE2,
						B.ADJUSTMENTNAME3,
						B.ADJUSTMENTPRICE3,
						B.ADJUSTMENTNAME4,
						B.ADJUSTMENTPRICE4,
						B.INSURANCEAMT,
						B.FREIGHTAMT,
						B.CODE,
						B.BILLTOSHORTNAME,
						B.BILLTONAMEFIELD1,
						B.BILLTONAMEFIELD2,
						B.BILLTOADDRESSLINE1,
						B.BILLTOADDRESSLINE2,
						B.BILLTOREVISEDID,
						B.SALESCURRENCYCODE,
						B.SALESCURRENCYMARK,
						B.SALECURRENCYREVID,
						B.PAYMENTCONDITIONCODE,
						B.PAYMENTCONDITIONREVISEDID,
						B.ADJUSTMENTCODE1,
						B.ADJUSTMENTPCT,
						B.ADJUSTMENTSUBTOTAL,
						B.ADJUSTMENTCODE2,
						B.ADJUSTMENTPCT2,
						B.ADJUSTMENTSUBTOTAL2,
						B.ADJUSTMENTPCT3,
						B.ADJUSTMENTCODE3,
						B.ADJUSTMENTSUBTOTAL3,
						B.ADJUSTMENTPCT4,
						B.ADJUSTMENTSUBTOTAL4,
						B.ADJUSTMENTCODE4,
						B.TOTALADJUSTMENTNAME,
						B.EXCHANGEDESCRIPTION,
						B.EXCHANGECALCULATIONID,
						B.EXCHANGECURRENCYCODE,
						B.INDICATIVECURRENCYCODE,
						B.ADJUSTMENTREVID,
						B.ISOEXCHANGECURRENCYCODE,
						B.ISOINDICATIVECURRENCYCODE,
						B.SHIPPERNAME2,
						B.SHIPPERNAME1,
						B.LASTCOMMENTS1,
						B.ZLASTCOMMENTS1,
						B.ZLASTCOMMENTS2,
						B.ZLASTCOMMENTS3,
						B.ZLASTCOMMENTS4,
						B.ZLASTCOMMENTS5,
						B.ZLASTCOMMENTS6,
						B.ZLASTCOMMENTS7,
						B.ZLASTCOMMENTS8,
						B.ZLASTCOMMENTS9,
						B.ZLASTCOMMENTS10,
						B.ZLASTCOMMENTS11,
						B.ZLASTCOMMENTS12,
						B.ZLASTCOMMENTS13,
						B.ZLASTCOMMENTS14,
						B.ZLASTCOMMENTS15,
						B.ZPAYTERMS1,
						B.ZPAYTERMS2,
						B.INVOICEDATE,
						B.DIVISON,
						B.IMPORTCOUNTRYCURRENCY,
						B.BUYERORDERCODE,
						B.CONTAINERID,
						B.PAYMENTTERMS,
						B.ATTRIBUTE1,
						B.ATTRIBUTE2,
						B.LASTCOMMENTS,
						B.DUEDATE,
						B.SALESBILLINGDATE
				   FROM BTP_PANASONIC_INVOICEHEADER as B
				   WHERE B.HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_HOLD_BOLNUM	-- Defect 206.n (V_HOLD_BOLNUM will have values of V_BOL for ETA Change and V_PREV_BOLNUM when BOL Changes 
				   AND B.HOUSEBOLNUMBER_ID IN ( select distinct MAX(C.HOUSEBOLNUMBER_ID)
								FROM BTP_PANASONIC_INVOICEHEADER as C
								WHERE C.HOUSEBOLNUMBER_HOUSEBOLNUMBER = B.HOUSEBOLNUMBER_HOUSEBOLNUMBER
								AND C.INVOICENUMBER = B.INVOICENUMBER )
				   AND B.INVOICENUMBER IN ( select distinct (D.INVOICENUMBER)
								FROM BTP_PANASONIC_INVOICEHEADER as D
								WHERE D.HOUSEBOLNUMBER_HOUSEBOLNUMBER = B.HOUSEBOLNUMBER_HOUSEBOLNUMBER
								AND D.HOUSEBOLNUMBER_ID = B.HOUSEBOLNUMBER_ID );

			     -- IF ( V_INVLINECNT = 0 ) THEN		-- SIT3Optimization
				 IF ( V_FLAG_INVLINECNT = FALSE ) THEN	 -- SIT3Optimization
				   INSERT INTO BTP_PANASONIC_INVOICELINE
				    SELECT
						B.PARTID,
						B.BUYERORDERNUMBER,
						B.BUYERPARTID,
						B.SUPPLIERPARTID,
						B.INVOICENUMBER_INVOICENUMBER,
						(SELECT A.ID from BTP_PANASONIC_BOLHEADER AS A WHERE A.ID = V_BOLID),
						(SELECT A.HOUSEBOLNUMBER from BTP_PANASONIC_BOLHEADER AS A WHERE A.ID = V_BOLID AND A.HouseBolNumber = V_BOL), -- defect206part3.n		
						B.COUNTRYOFORIGIN,
						B.COUNTRYOFEXPORT,
						B.QUANTITY,
						B.UNITPRICE,
						B.EXTENDEDCOST,
						B.BUSINESSUNIT,
						B.NETWEIGHT,
						B.GROSSWEIGHT,
						B.CONTAINERID,
						B.PURCHASEORDERNUMBER,
						B.LINEVOLUME,
						B.MANUFACTURERID,
						B.CASEFROM,
						B.CASETO,
						B.CASETYPE,
						B.NUMBEROFCASE,
						B.QUANTITYPERCASE,
						B.PARTUNITOFMEASUREMENT,
						B.CONTAINERTYPE,
						B.SAMPLETYPE,
						B.SWPMFLAG,
						B.SWPMCOUNTRYOFORIGIN,
						B.STATUS,
						B.BRANDNAME,
						B.ADDLREFNO,
						B.MECAORDERNBR,
						B.ORDERITEMNBR, 
					   --  jyothi changed for 206
						cast(( case B.ACTION
						   when
						   'A'
						   then
						   'M'
						   else
						   B.ACTION
						end ) AS NVARCHAR(1)
						),       
						B.LINENUMBER,
						B.FINALDESTINATIONCODE,
						B.BUYERCODE,
						B.BUYERDESCRIPTION,
						B.INSURANCEAMOUNT,
						B.FREIGHTAMOUNT,
						B.PROMOTIONALITEMS,
						B.SUPPLIERINVOICENUMBER,
						B.HOUSEBOLNUMBER,
						B.NOTES,
						B.SWPMNOTES,
						B.PACKINGCOST,
						B.STATUSREMARK,
						B.ATTRIBUTE1,
						B.ATTRIBUTE2,
						B.LINEDUTY,
						B.PRIMARYDUTYRATE,
						B.ADVALOREMDUTYRATE,
						B.OTHERDUTYRATE,
						B.CASEMARKINGS,
						B.SPECIFICATIONS,
						B.MMVPROAMT,
						B.NDCPROAMT,
						B.BTP_IBDSTATUS,
						-- B.BTP_IBDACTION,
						'U',
						B.BTP_IBDNUMBER,
						B.SAP_LINEID_IBD,
						B.BTP_INVOICESTATUS,
						B.BTP_INVOICENUMBER,
						B.BTP_INVOICEACTION,
						B.BTP_INVOICEDATE,
						B.SAP_LINEID_INVOICE,
						B.BTP_GRSTATUS,
						B.BTP_GRNUMBER,
						B.BTP_GRACTION,
						B.SAP_LINEID_GR,
						B.BTP_ASN_DI_STATUS,
						B.BTP_ASN_DINUMBER,
						B.STATUSERROR,
						B.DIVERSIONFLAG,
						B.ZBUSINESS_INDICATOR
				    FROM BTP_PANASONIC_INVOICELINE as B
				    WHERE B.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_HOLD_BOLNUM	-- Defect 206part3.n
				    AND B.INVOICENUMBER_HOUSEBOLNUMBER_ID IN ( select distinct MAX(D.INVOICENUMBER_HOUSEBOLNUMBER_ID)
					   FROM BTP_PANASONIC_INVOICELINE as D
					   WHERE D.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = B.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER
					   AND D.INVOICENUMBER_INVOICENUMBER = B.INVOICENUMBER_INVOICENUMBER
                     -- Defect 206.o		AND IFNULL((D.BTP_IBDNUMBER),'X') != 'X'
					   AND D.LINENUMBER = B.LINENUMBER )
				    AND B.INVOICENUMBER_INVOICENUMBER IN ( select distinct MAX(E.INVOICENUMBER_INVOICENUMBER)
					   FROM BTP_PANASONIC_INVOICELINE as E
					   WHERE E.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = B.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER
					   AND E.INVOICENUMBER_INVOICENUMBER = B.INVOICENUMBER_INVOICENUMBER
					   AND E.INVOICENUMBER_HOUSEBOLNUMBER_ID = B.INVOICENUMBER_HOUSEBOLNUMBER_ID
                     -- Defect 206.o		AND IFNULL((E.BTP_IBDNUMBER),'X') != 'X'
					   AND E.LINENUMBER = B.LINENUMBER)
				    AND B.LINENUMBER IN ( select distinct MAX(F.LINENUMBER)
					   FROM BTP_PANASONIC_INVOICELINE as F
					   WHERE F.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = B.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER
					   AND F.INVOICENUMBER_INVOICENUMBER = B.INVOICENUMBER_INVOICENUMBER
					   AND F.INVOICENUMBER_HOUSEBOLNUMBER_ID = B.INVOICENUMBER_HOUSEBOLNUMBER_ID
                        -- Defect 206.o		AND IFNULL((F.BTP_IBDNUMBER),'X') != 'X'
					   AND F.LINENUMBER = B.LINENUMBER);
			     ELSE										-- Defect91.n
				   V_STATUS = 'READY';						-- Defect91.n
			     END IF;		

			     -- Defect 206 Feb 17th Added logic to update NULL IBDNUMBER, IBDACTION And IBDSTATUS
			     -- 20th Feb. Defect 206part3 V_HOLD_BOLNUM will have values of V_BOL for ETA Change and V_PREV_BOLNUM when BOL Changes 
			   END IF;	-- Defect43.b June 12th 2024. The Update for InvoiceLine should occur for ETA and BOL Change
			  
			     /* SELECT COUNT(B.INVOICENUMBER_INVOICENUMBER) INTO V_INVLINECNT				-- SIT3Optimization
			    FROM BTP_PANASONIC_INVOICELINE as B
			    WHERE B.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_BOL -- Defect 43b.n Count was incorrect for BOLChange V_HOLD_BOLNUM	-- Defect 206.n
			    AND B.INVOICENUMBER_HOUSEBOLNUMBER_ID = V_BOLID 
			    AND IFNULL((B.BTP_IBDNUMBER),'X') = 'X';
				   
			   IF (V_INVLINECNT > 0) THEN   */ -- SIT3Optimization
 			   IF EXISTS ( SELECT TOP 1 B.INVOICENUMBER_INVOICENUMBER
			    		   FROM BTP_PANASONIC_INVOICELINE as B
			   			   WHERE B.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_BOL
			    			 AND B.INVOICENUMBER_HOUSEBOLNUMBER_ID = V_BOLID 
			    			 AND IFNULL((B.BTP_IBDNUMBER),'X') = 'X' ) THEN				-- SIT3Optimization
				   
				   BEGIN
				   DECLARE CURSOR C_INVOICELINE FOR	
					SELECT G.INVOICENUMBER_INVOICENUMBER, G.LINENUMBER, G.PARTID, G.BTP_IBDNUMBER, G.BTP_IBDACTION, G.BTP_IBDSTATUS, G.SAP_LINEID_IBD, G.BTP_GRSTATUS, G.BTP_GRNUMBER, G.SAP_LINEID_GR
					FROM BTP_PANASONIC_INVOICELINE as G
					WHERE G.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_HOLD_BOLNUM -- Defect 206.n	 									
					 AND G.INVOICENUMBER_HOUSEBOLNUMBER_ID IN ( select distinct MAX(D.INVOICENUMBER_HOUSEBOLNUMBER_ID)
																   FROM BTP_PANASONIC_INVOICELINE as D
																   WHERE D.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = G.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER
																   AND D.INVOICENUMBER_INVOICENUMBER = G.INVOICENUMBER_INVOICENUMBER
																   AND D.PARTID = G.PARTID
																   AND IFNULL((D.BTP_IBDNUMBER),'X') != 'X'
																   AND D.LINENUMBER = G.LINENUMBER )
					 AND G.INVOICENUMBER_INVOICENUMBER IN ( select distinct MAX(E.INVOICENUMBER_INVOICENUMBER)
															   FROM BTP_PANASONIC_INVOICELINE as E
															   WHERE E.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = G.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER
															   AND E.INVOICENUMBER_INVOICENUMBER = G.INVOICENUMBER_INVOICENUMBER
															   AND E.INVOICENUMBER_HOUSEBOLNUMBER_ID = G.INVOICENUMBER_HOUSEBOLNUMBER_ID
															   AND IFNULL((E.BTP_IBDNUMBER),'X') != 'X'
															   AND E.LINENUMBER = G.LINENUMBER)
					 AND G.LINENUMBER IN ( select distinct MAX(F.LINENUMBER)
											   FROM BTP_PANASONIC_INVOICELINE as F
											   WHERE F.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = G.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER
											   AND F.INVOICENUMBER_INVOICENUMBER = G.INVOICENUMBER_INVOICENUMBER
											   AND F.INVOICENUMBER_HOUSEBOLNUMBER_ID = G.INVOICENUMBER_HOUSEBOLNUMBER_ID
											   AND IFNULL((F.BTP_IBDNUMBER),'X') != 'X'
											   AND F.LINENUMBER = G.LINENUMBER)											
					 AND IFNULL((G.BTP_IBDNUMBER),'X') != 'X';
						 
				   FOR	cur_row AS C_INVOICELINE
				   DO
						   UPDATE BTP_PANASONIC_INVOICELINE AS B
						   SET B.BTP_IBDNUMBER = cur_row.BTP_IBDNUMBER,
							   B.BTP_IBDACTION = 'U', 
							   B.BTP_IBDSTATUS = '',
							   B.SAP_LINEID_IBD = cur_row.SAP_LINEID_IBD,
							   B.BTP_GRSTATUS = cur_row.BTP_GRSTATUS,
							   B.BTP_GRNUMBER = cur_row.BTP_GRNUMBER,
							   B.SAP_LINEID_GR = cur_row.SAP_LINEID_GR								
						   WHERE B.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_BOL
						   AND B.INVOICENUMBER_HOUSEBOLNUMBER_ID = V_BOLID
						   AND B.INVOICENUMBER_INVOICENUMBER = cur_row.INVOICENUMBER_INVOICENUMBER
						   AND B.LINENUMBER = cur_row.LINENUMBER
						   AND IFNULL((B.BTP_IBDNUMBER),'X') = 'X'						
						   AND B.PARTID = cur_row.PARTID; 						
				   END FOR;
				 END;
			   ELSE										-- Defect91.n
				   V_STATUS = 'READY';						-- Defect91.n					
			   END IF;		

			    -- IF ( V_INVADDLINECNT = 0 ) THEN	-- SIT3Optimization
			   IF (V_FLAG_INVADDLINECNT = FALSE) THEN -- SIT3Optimization
				   INSERT INTO BTP_PANASONIC_ADDITIONALINVOICELINE
				   SELECT
							D.INVOICELINESTATUS,
							D.PARTID_PARTID,
							D.PARTID_INVOICENUMBER_INVOICENUMBER,
							(SELECT A.ID from BTP_PANASONIC_BOLHEADER AS A WHERE A.ID = V_BOLID),
							(SELECT A.HOUSEBOLNUMBER from BTP_PANASONIC_BOLHEADER AS A WHERE A.ID = V_BOLID AND A.HouseBolNumber = V_BOL), -- defect206part3.n		
							D.PARTID_LINENUMBER,
							D.INVOICEITEMNBR,
							D.INVOICESEQUENCENBR,
							D.PURCHASEORDERSUFFIXNBR,
							D.PONBRTRIPARTITE,
							D.POITEMNBRTRIPARTITE,
							D.SALESOFFICENBR,
							D.SALESOFFICECONTINUE,
							D.INVOICEITEMNBRREVID,
							D.ENDUSERORDERNBR,
							D.ENDUSERCODE,
							D.ENDUSERSHORTNAME,
							D.SALESUNITPRICEREVID,
							D.UNITPRICEREVID,
							D.HSCODE,
							D.COMMODITYNAME,
							D.USERCOMMODITYNAME,
							D.COLORCODE,
							D.COLORNAME,
							D.SUPPLIERSHORTNAME,
							D.SALEUNITPRICE,
							D.QTYPERSALESUNITPRICE,
							D.QTYPERSLSUNITPRICEPACKTYPE,
							D.QTYPERSLSUNITPRICEPACKNAMEONE,
							D.QTYPERSLSUNITPRICEPACKNAMEMANY,
							D.QTYPERFACTORYUNITPRICEPACKTYPE,
							D.QTYPERFACTORYUNITPRICEPACKNAMEONE,
							D.QTYPERFACTORYUNITPRICEPACKNAMEMANY,
							D.TOTALMODELSALESPRICE,
							D.NETWEIGHTPERCARTONONEMODEL,
							D.TOTALNETWEIGHTPERCARTON,
							D.GROSSWEIGHTPERCARTON,
							D.PASCSERVICEMODELNBR,
							D.PASCSERVICESPAREPARTSNAME,
							D.PASCORIGINALPARTSNBR,
							D.PARENTMODELNBR,
							D.PACKTYPE,
							D.PACKTYPENAME,
							D.CASHORTNAME,
							D.QTYPERPACK,
							D.MIXEDPACKINGID,
							D.NBROFDIFFERENTMODELSINCARTON,
							D.ORIGINOFMXDPACKINGPLITEMNBR,
							D.ORIGINOFMXDPACKINGIVITEMNBR,
							D.ORIGINOFMXDPACKINGCONTITEMNBR,
							D.UNITIZEDPACKINGSTYLECODE,
							D.UNITIZEDPACKINGSTYLENAME,
							D.UNITIZEDNBROFPACKS,
							D.MXDPACKINGPONBR,
							D.MXDPACKINGPOITEMNBR,
							D.MXDPACKINGPOKITITEMNBR,
							D.MXDPACKINGSALESNOTENBR,
							D.MXDPACKINGSALESNOTEITEMNBR,
							D.MXDPACKINGSALESNOTEKITNBR,
							D.MXDPACKINGIVNBR,
							D.CONTAINERREFERENCENBR,
							D.CONTAINERITEMNBR,
							D.CONTAINERSEQUENCENBR,
							D.MANIFESTNBR,
							D.CONTAINERSEALNBR1,
							D.CONTAINERSEALNBR2,
							D.CONTAINERSEALNBR3,
							D.UPCCODE,
							D.SHIPMENTID,
							D.PACKINGLISTSUFFIXNBR,
							D.DELIVERYLISTITEMNBR,
							D.CASENBRTOREVID,
							D.CASENBRFROMREVID,
							D.QTYPERPACKREVID,
							D.QTYOFFORWARDINGGOODSREVID,
							D.SALESNOTEMODELLINENBR,
							D.SALESNOTEKITLINENBR,
							D.SALESNOTENBR,
							D.COCOMID,
							D.EXPORTLICENSENBRCOCOM,
							D.LOTNUMBER,
							D.NAPANAMASTERBOLNUMBER,
							D.PACKINGLISTNBR,
							D.LINEVOLUMEPERCASE,
							D.CAFACTORYNBR,
							D.ZSTATUSREMARKS1,
							D.ZSTATUSREMARKS2,
							D.ZSTATUSREMARKS3,
							D.ZSTATUSREMARKS4,
							D.ZSTATUSREMARKS5,
							D.ZSTATUSREMARKS6,
							D.ZSTATUSREMARKS7,
							D.ZSTATUSREMARKS8,
							D.ZSTATUSREMARKS9,
							D.ZSTATUSREMARKS10,
							D.ZSPECIFICATION,
							D.ZSPECIFICATION1,
							D.ZSPECIFICATION2,
							D.ZSPECIFICATION3,
							D.ZSPECIFICATION4,
							D.ZSPECIFICATION5,
							D.ZSPECIFICATION6,
							D.ZSPECIFICATION7,
							D.ZSPECIFICATION8,
							D.SWPMNOTES1,
							D.SWPMNOTES2,
							D.SWPMNOTES3,
							D.ZNOTES1,
							D.ZNOTES2,
							D.ZNOTES3,
							D.ZCASEMARKING,
							D.ZCASEMARKING1,
							D.ZCASEMARKING2,
							D.ZCASEMARKING3,
							D.ZCASEMARKING4,
							D.ZCASEMARKING5,
							D.MECAORDERNBR,
							D.ORDERITEMNBR
				   FROM BTP_PANASONIC_ADDITIONALINVOICELINE D, BTP_PANASONIC_INVOICELINE X
				   WHERE D.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_HOLD_BOLNUM -- Defect 206part3.n						
				   AND D.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = X.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER
				   AND D.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_ID = X.INVOICENUMBER_HOUSEBOLNUMBER_ID
				   AND D.PARTID_INVOICENUMBER_INVOICENUMBER = X.INVOICENUMBER_INVOICENUMBER
				   AND D.PARTID_PARTID = X.PARTID
				   AND D.PARTID_LINENUMBER = X.LINENUMBER
				   AND D.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_ID IN ( 
						   select MAX(E.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_ID)
						   FROM BTP_PANASONIC_ADDITIONALINVOICELINE as E, BTP_PANASONIC_INVOICELINE Y
						   WHERE E.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = D.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER
						   AND E.PARTID_PARTID = Y.PARTID							
						   AND E.PARTID_INVOICENUMBER_INVOICENUMBER = D.PARTID_INVOICENUMBER_INVOICENUMBER
						   AND E.PARTID_LINENUMBER = D.PARTID_LINENUMBER
						   AND E.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = Y.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER
						   AND D.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_ID = Y.INVOICENUMBER_HOUSEBOLNUMBER_ID
						   AND D.PARTID_INVOICENUMBER_INVOICENUMBER = Y.INVOICENUMBER_INVOICENUMBER
						   AND D.PARTID_PARTID = Y.PARTID
						   AND D.PARTID_LINENUMBER = Y.LINENUMBER );
				   	V_STATUS = 'ETADATA_READY';
			   ELSE
				   	V_STATUS = 'READY';
			   END IF;
	   END IF; 
	   	
	   IF V_FLAG_BOLCHANGE = TRUE THEN		   
		   V_STATUS = 'BOLDATA_READY';
	   ELSE
		   V_STATUS = 'READY';
	   END IF;

    END