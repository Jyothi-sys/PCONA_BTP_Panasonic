PROCEDURE "USP_UPDATE_MNET_STATUS"(IN V_ID INTEGER, IN V_BOL NVARCHAR(50),IN V_PO NVARCHAR(50),OUT O_STATUS NVARCHAR(1))--TT_MNET_STD.Stat "TT_MNET_STD" )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   -- SIT3 Defect 47 - Fixing the logic for Checking InvoiceLine Qty against Open Qty . Added additional check for ETA and container change
   -- SIT3 Defect 67 - Cleaning Stored Procedure. Added clarity and change in Sql for efficiency (SIT3Optimization)
   -- SIT3 Defect 74 - Restructured code to optimize the SQL calls and address the defect.Removed redundant variables
   -- SIT3 Optimization - Replaced Count(*) statements with combination of Exists an select top 1 sql
   -- SIT3 Optimization July 9th  - O_Status will return "S" if it has successfully validated all PO, If no lines are validated then it returns an "E"
   -- SIT3 Optimization July 10th - Condition for Quantity check modified to take into account Price Change Only. 
   -- Sep 4th; INC0219526 - Added logic for checking if current invoiceline is being processed when DiversionFlag is D. If the flag is "D" exception is raised.
   AS
 BEGIN
    DECLARE v_initialDestination NVARCHAR(20);
    DECLARE v_plant NVARCHAR(4);
    -- DECLARE v_cnt INTEGER;				-- SIT3 Optimization
    DECLARE v_destExistsFlag BOOLEAN;		-- SIT3 Optimization
    DECLARE v_errFlag BOOLEAN;
    -- DECLARE M_COUNT INTEGER;				-- SIT3 Optimization
    DECLARE V_NEXTID INTEGER;
    DECLARE V_POTYPE NVARCHAR(1);
    DECLARE V_IMPORTSHIPMENTNUMBER NVARCHAR(30);
    DECLARE V_OBOLID INTEGER;
    DECLARE CONTAINERID NVARCHAR(30);
    DECLARE UNITPRICE DECIMAL(26,3);
    DECLARE BTP_IBDSTATUS NVARCHAR(10);
    DECLARE BTP_IBDNUMBER NVARCHAR(10);
    DECLARE BTP_INVOICESTATUS NVARCHAR(10);
    DECLARE SAP_LINEID_IBD NVARCHAR(10);
    DECLARE BTP_INVOICENUMBER NVARCHAR(10);
    DECLARE SAP_LINEID_INVOICE NVARCHAR(10);
    DECLARE BTP_GRSTATUS NVARCHAR(10);
    DECLARE BTP_GRNUMBER NVARCHAR(10);
    DECLARE BTP_ASN_DI_STATUS NVARCHAR(10);
    DECLARE BTP_ASN_DINUMBER NVARCHAR(10);
    DECLARE QUANTITY NVARCHAR(20);
    DECLARE INITIALDESTINATIONETA_PREV DATE;
    DECLARE BOL_FLAG_CHECK boolean;
    DECLARE CURRENT_INITIALDESTINATIONETA date;
    DECLARE OUT_PREVIOUS_RECORD_EXISTING boolean;
	DECLARE OUT_DIVERSIONFLAG NVARCHAR(1);
    DECLARE Statuslineid INTEGER;   -- SIT3Optimization
	DECLARE Error_Message NVARCHAR(10000);
	DECLARE V_LineNumber  NVARCHAR(30) DEFAULT NULL;                -- MNET /Factory Invoice Line Number
    Declare V_INVID       NVARCHAR(30) DEFAULT NULL;-- MNET /Factory Invoice Number 
    
	DECLARE CASE_COND CONDITION FOR SQL_ERROR_CODE 10001;
	DECLARE EXIT HANDLER FOR CASE_COND RESIGNAL;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN 
		O_STATUS = 'E';
		SELECT ::SQL_ERROR_MESSAGE  into Error_Message FROM DUMMY;
    	IF ( V_LineNumber IS NULL AND V_INVID IS NULL ) THEN
    	    UPDATE BTP_PANASONIC_INVOICELINE AS B 
		    SET B.STATUS = 'E' 
		    WHERE B.INVOICENUMBER_HOUSEBOLNUMBER_ID = V_ID 
		      AND B.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_BOL
		      AND B.PURCHASEORDERNUMBER = V_PO;
		ELSE
		    UPDATE BTP_PANASONIC_INVOICELINE AS B 
		    SET B.STATUS = 'E' 
		    WHERE B.INVOICENUMBER_HOUSEBOLNUMBER_ID = V_ID 
		      AND B.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_BOL
		      AND B.PURCHASEORDERNUMBER = V_PO
		      AND B.LINENUMBER = V_LineNumber
		      AND B.INVOICENUMBER_INVOICENUMBER = V_INVID;		
		END IF;
		  SELECT  "MNetStatusMonitoring_ID".NEXTVAL INTO V_NEXTID  FROM DUMMY;
		  Select T0.IMPORTSHIPMENTNUMBER  
		  INTO V_IMPORTSHIPMENTNUMBER  from BTP_PANASONIC_BOLHEADER As T0 
		  Where T0.ID = V_ID And T0.HOUSEBOLNUMBER = V_BOL;
			INSERT INTO "BTP_PANASONIC_MNETSTATUSMONITORING"
				(CREATEDAT,ID,BOLID,HOUSEBOLNUMBER, DATE,OBJECTTYPE,STATUS,MESSAGE, IMPORTSHIPMENTNUMBER)
			VALUES
				(NOW(),V_NEXTID,V_ID,V_BOL,NOW(),'VALIDATION','E', CONCAT('USP_UPDATE_MNET_STATUS - SQL  :', Error_Message) , V_IMPORTSHIPMENTNUMBER);
			
			INSERT INTO "BTP_PANASONIC_MNETSTATUSMONITORINGITEM"
			(ID_ID,LINEID,LINENUMBER,MATERIAL,PURCHASEORDER,PURCHASEORDERITEM)
			Select 
				V_NEXTID AS ID_ID,
				ROW_NUMBER() OVER (ORDER BY T0.LINENUMBER ASC) AS LINEID,
        		T0.LINENUMBER,T0.SUPPLIERPARTID,T0.PURCHASEORDERNUMBER,T0.ORDERITEMNBR from BTP_PANASONIC_INVOICELINE As T0 
        			Where T0.INVOICENUMBER_HOUSEBOLNUMBER_ID  = V_ID And T0.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_BOL
        			And T0.PURCHASEORDERNUMBER = V_PO ;	
		COMMIT;	
    END;
    
    -- SIT3Optimization SELECT COUNT(*) INTO M_COUNT from MNET_WORKFLOW_GET_MNET_DATA As T0 Where T0.ID = V_ID And T0.HOUSEBOLNUMBER = V_BOL And T0.PURCHASEORDERNUMBER = V_PO; 
	-- Initialize Status

	O_STATUS = 'S';
	IF EXISTS (SELECT TOP 1 T0.HOUSEBOLNUMBER from BTP_PANASONIC_BOLHEADER As T0 Where T0.ID = V_ID And T0.HOUSEBOLNUMBER = V_BOL) THEN
		Select T0.FLAG_BOLCHANGE, T0.INITIALDESTINATIONETA, T0.INITIALDESTINATION,T0.IMPORTSHIPMENTNUMBER  
		INTO BOL_FLAG_CHECK, CURRENT_INITIALDESTINATIONETA, v_initialDestination,V_IMPORTSHIPMENTNUMBER  from BTP_PANASONIC_BOLHEADER As T0 
		Where T0.ID = V_ID And T0.HOUSEBOLNUMBER = V_BOL;
	ELSE
		O_STATUS = 'E';
		-- This condition should never occur.
	END IF;
    -- SELECT COUNT(*) INTO M_COUNT from BTP_PANASONIC_INVOICELINE As T0 Where T0.INVOICENUMBER_HOUSEBOLNUMBER_ID = V_ID And T0.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_BOL And T0.PURCHASEORDERNUMBER = V_PO;

    -- IF M_COUNT > 0 THEN
    IF EXISTS (SELECT TOP 1 T0.INVOICENUMBER_HOUSEBOLNUMBER_ID from BTP_PANASONIC_INVOICELINE As T0 Where T0.INVOICENUMBER_HOUSEBOLNUMBER_ID = V_ID And T0.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_BOL And T0.PURCHASEORDERNUMBER = V_PO ) THEN
    	--Replacing call to view Get_MNET_DATA by calling InvoiceLine and determining the PO_TYPE based on plant of the 1st purchaseorderitem as per the business rule 
        --Select TOP 1 T0.HOUSEBOLNUMBER , T0.INVOICENUMBER , T0.CONTAINERID,T0.POTYPE,T0.IMPORTSHIPMENTNUMBER 
        --INTO V_BOLNO,V_INVNO,V_CONID,V_POTYPE,V_IMPORTSHIPMENTNUMBER From MNET_WORKFLOW_GET_MNET_DATA As T0 Where T0.ID = V_ID And T0.HOUSEBOLNUMBER = V_BOL 
		--And T0.PURCHASEORDERNUMBER = V_PO order by LINENUMBER;  -- SIT3_Defect47.n  Added OrderBy
       
		Select Top 1 T0.PLANT into v_plant DEFAULT '' From BTP_PANASONIC_A_PURCHASEORDERITEM As T0 Where PURCHASEORDER_PURCHASEORDER = V_PO ORDER BY PURCHASEORDERITEM ASC;     -- SIT3_Defect47.n  Added OrderBy so that Plant is picked up from 1st line of PO.
		
		SELECT CAST(CASE ifnull(T5.SAP_Code, 'X') WHEN 'X' THEN 'S' ELSE 'D' END AS NVARCHAR(1)) INTO V_POTYPE 
		FROM DUMMY LEFT JOIN BTP_PANASONIC_ZCROSSREF AS T5 ON :v_plant = T5.SAP_Code AND (T5.Function_Code = 'FG_DROP' OR T5.Function_Code = 'PART_DROP');
		
		-- Select Count(*) into v_cnt From BTP_PANASONIC_ZIPCODE_DESTINATION As T0 Where T0.DESTINATION = v_initialDestination And T0.PLANT = v_plant ;
		IF EXISTS(Select TOP 1 T0.DESTINATION From BTP_PANASONIC_ZIPCODE_DESTINATION As T0 Where T0.DESTINATION = v_initialDestination And T0.PLANT = v_plant) THEN
			v_destExistsFlag = TRUE;
		ElSE
			v_destExistsFlag = FALSE;
		END IF; 
   
        BEGIN	
	  
				DECLARE HOLD_SCHEDULELINEOPENQTY DECIMAL;  	-- Defect 47.n
				DECLARE HOLD_QUANTITY DECIMAL; 	            -- Defect 47.n
      
    			--SIT3Optimization Optimized Cursor Declaration by Replacing View with use of tables.
				DECLARE CURSOR C_INVOICELINES FOR
   
					Select T0.PURCHASEORDERNUMBER,
						-- T0.PURCHASEORDERITEM,   --SIT3Optimization
						T0.orderitemnbr AS PURCHASEORDERITEM,
						T0.DIVERSIONFLAG, 			-- INCINC0219526
						T0.SUPPLIERPARTID,         --SIT3Optimization
						-- T0.HOUSEBOLNUMBER,	   --SIT3Optimization
						-- T0.INVOICENUMBER,	   --SIT3Optimization
						T0.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER AS HOUSEBOLNUMBER,
						T0.INVOICENUMBER_INVOICENUMBER AS INVOICENUMBER,
						T0.LINENUMBER,
						-- T0.ID,				 --SIT3Optimization
						T0.INVOICENUMBER_HOUSEBOLNUMBER_ID AS ID,
						T0.CONTAINERID,
						T0.QUANTITY,
						T0.UNITPRICE,
						IFNULL(T1.SCHEDULELINEOPENQTY,0) AS "SCHEDULELINEOPENQTY",
						IFNULL(T2.MATERIAL,'') AS "MATERIAL",
						IFNULL(T2.SUPPLIERMATERIALNUMBER,'') AS "SUPPLIERMATERIALNUMBER",
						T3.PASCOriginalPartsNbr
						-- T0.PASCOriginalPartsNbr			  --SIT3Optimization
					 -- FROM MNET_WORKFLOW_GET_MNET_DATA As T0 --SIT3Optimization
					FROM BTP_PANASONIC_INVOICELINE AS T0 
					LEFT JOIN BTP_PANASONIC_ADDITIONALINVOICELINE AS T3 on
					T0.PARTID = T3.PARTID_PARTID and
					T0.INVOICENUMBER_HOUSEBOLNUMBER_ID = T3.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_ID AND
					T0.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = T3.PARTID_INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER AND
					T0.INVOICENUMBER_INVOICENUMBER = T3.PARTID_INVOICENUMBER_INVOICENUMBER AND
					T0.LINENUMBER = T3.PARTID_LINENUMBER
					LEFT JOIN BTP_PANASONIC_PO_UPDATE as T1 on T0.PURCHASEORDERNUMBER = T1.PURCHASEORDER 
					     -- and T0.PURCHASEORDERITEM = T1.PURCHASEORDERITEM	 --SIT3Optimization
					     and T0.orderitemnbr = T1.PURCHASEORDERITEM
					LEFT JOIN BTP_PANASONIC_A_PURCHASEORDERITEM As T2 on T0.PURCHASEORDERNUMBER = T2.PURCHASEORDER_PURCHASEORDER 
						 -- and T0.PURCHASEORDERITEM = T2.PURCHASEORDERITEM	 --SIT3Optimization
						 and T0.orderitemnbr = T2.PURCHASEORDERITEM 
					 -- WHERE T0.ID = V_ID And T0.HOUSEBOLNUMBER = V_BOL 	--SIT3Optimization
					WHERE T0.INVOICENUMBER_HOUSEBOLNUMBER_ID  = V_ID And T0.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_BOL 
					  And T0.PURCHASEORDERNUMBER = V_PO
					 -- And T0.DIVERSIONFLAG IS NULL
					 ;
     
			Statuslineid = 1;                   -- SIT3Optimization  

			FOR cur_rows AS C_INVOICELINES
			DO

				HOLD_SCHEDULELINEOPENQTY = cur_rows.SCHEDULELINEOPENQTY;		
				HOLD_QUANTITY = cur_rows.quantity;
                v_errFlag = FALSE;          -- Initialize at the top of the loop
				V_LineNumber = cur_rows.LINENUMBER;
				V_INVID = cur_rows.INVOICENUMBER;
				CALL GET_PREV_BOLID_WITHTYPES(
						:V_PO, 
						cur_rows.PURCHASEORDERITEM, 
						:V_BOL, 
						cur_rows.INVOICENUMBER, 
						cur_rows.LINENUMBER,
						:V_IMPORTSHIPMENTNUMBER, 
						:V_ID, 
						'W',
						:V_OBOLID,
						:CONTAINERID,
						:UNITPRICE,
						:BTP_IBDSTATUS,/*  */
						:BTP_IBDNUMBER,
						:BTP_INVOICESTATUS,
						:SAP_LINEID_IBD,
						:BTP_INVOICENUMBER,
						:SAP_LINEID_INVOICE,
						:BTP_GRSTATUS,
						:BTP_GRNUMBER,
						:BTP_ASN_DI_STATUS,
						:BTP_ASN_DINUMBER,
						:QUANTITY,
						:INITIALDESTINATIONETA_PREV,
						:OUT_PREVIOUS_RECORD_EXISTING,
						:OUT_DIVERSIONFLAG
				);
				
				IF ( :OUT_DIVERSIONFLAG = 'D' ) THEN			--INC0219526.sn Give Exception if there is change in qty,price on invoiceline having DiversionFlag = 'D'. Team to validate that the DiversionFlag is set to '' when reversal takes place for ALL 'U' Lines associated with Invoiceline.
					
					IF ( BOL_FLAG_CHECK = FALSE AND CURRENT_INITIALDESTINATIONETA = :INITIALDESTINATIONETA_PREV  
					    AND ( ( :OUT_PREVIOUS_RECORD_EXISTING = TRUE AND ( HOLD_QUANTITY <> :QUANTITY OR cur_rows.CONTAINERID <> :CONTAINERID
        				OR cur_rows.UNITPRICE <> :UNITPRICE ) ) OR :OUT_PREVIOUS_RECORD_EXISTING = FALSE ) ) THEN

                        v_errFlag = TRUE;   
                
						SELECT  "MNetStatusMonitoring_ID".NEXTVAL INTO V_NEXTID  FROM DUMMY;           
						INSERT INTO "BTP_PANASONIC_MNETSTATUSMONITORING"           
							(CREATEDAT,ID,BOLID,HOUSEBOLNUMBER,INVOICENUMBER,CONTAINERID,DATE,OBJECTTYPE,STATUS,MESSAGE,IMPORTSHIPMENTNUMBER)           
						VALUES           
							(NOW(),V_NEXTID,V_ID,
							cur_rows.HOUSEBOLNUMBER,
							cur_rows.INVOICENUMBER,
							cur_rows.CONTAINERID,
							NOW(),'VALIDATION','E','Diversion Executed on InvoiceLine. Automated Workflow process can not be executed on Invoice: ' || cur_rows.INVOICENUMBER || ', Invoice Line: ' || cur_rows.LINENUMBER || ' for Purchase Order: ' || V_PO || ' & OrderItem: ' || cur_rows.PURCHASEORDERITEM,V_IMPORTSHIPMENTNUMBER  );
                
						INSERT INTO "BTP_PANASONIC_MNETSTATUSMONITORINGITEM"
						(ID_ID,LINEID,LINENUMBER,MATERIAL,PURCHASEORDER,PURCHASEORDERITEM)
						Select 
						V_NEXTID AS ID_ID,
						Statuslineid,
						cur_rows.LINENUMBER,
						cur_rows.SUPPLIERPARTID,
						cur_rows.PURCHASEORDERNUMBER,
						cur_rows.PURCHASEORDERITEM
						FROM Dummy;
					END IF;
				ELSE						-- --INC0219526.en 
                     -- v_cnt = 0 when ZipCode Destination is not found for Plant associated with 1st PurchaseOrderItem of an Order.
                    IF ( v_destExistsFlag = FALSE ) THEN

                        -- TT_MNET_STD = SELECT V_ID AS MNET_ID , 'E' As STATUS FROM DUMMY; 
                        -- O_STATUS = 'E';
                        v_errFlag = TRUE;   
                
						SELECT  "MNetStatusMonitoring_ID".NEXTVAL INTO V_NEXTID  FROM DUMMY;           
						INSERT INTO "BTP_PANASONIC_MNETSTATUSMONITORING"           
							(CREATEDAT,ID,BOLID,HOUSEBOLNUMBER,INVOICENUMBER,CONTAINERID,DATE,OBJECTTYPE,STATUS,MESSAGE,IMPORTSHIPMENTNUMBER)           
						VALUES           
                            (NOW(),V_NEXTID,V_ID,
                            --V_BOLNO,V_INVNO,V_CONID,
                            cur_rows.HOUSEBOLNUMBER,
							cur_rows.INVOICENUMBER,
							cur_rows.CONTAINERID,
                            NOW(),'VALIDATION','E','Data is not available in ZIPCODE_DESTINATION for InitialDestination: '|| v_initialDestination || ' & Plant: ' || v_plant ,V_IMPORTSHIPMENTNUMBER);                
						INSERT INTO "BTP_PANASONIC_MNETSTATUSMONITORINGITEM"
						(ID_ID,LINEID,LINENUMBER,MATERIAL,PURCHASEORDER,PURCHASEORDERITEM)
						Select 
						V_NEXTID AS ID_ID,
						Statuslineid,
						cur_rows.LINENUMBER,
						cur_rows.SUPPLIERPARTID,
						cur_rows.PURCHASEORDERNUMBER,
						cur_rows.PURCHASEORDERITEM
						FROM Dummy;
					END IF;

					IF (IFNULL(:BTP_GRNUMBER,'') !='' AND V_POTYPE = 'S') THEN 
						
						UPDATE BTP_PANASONIC_INVOICELINE AS B
						SET
							B.STATUS = 'E',
							B.CONTAINERID = :CONTAINERID,
							B.UNITPRICE = :UNITPRICE,
							B.BTP_IBDSTATUS = :BTP_IBDSTATUS,
							B.BTP_IBDNUMBER = :BTP_IBDNUMBER,
							B.BTP_INVOICESTATUS = :BTP_INVOICESTATUS,
							B.SAP_LINEID_IBD = :SAP_LINEID_IBD,
							B.BTP_INVOICENUMBER = :BTP_INVOICENUMBER,
							B.SAP_LINEID_INVOICE = :SAP_LINEID_INVOICE,
							B.BTP_GRSTATUS = :BTP_GRSTATUS,
							B.BTP_GRNUMBER = :BTP_GRNUMBER,
							B.BTP_ASN_DI_STATUS = :BTP_ASN_DI_STATUS,
							B.BTP_ASN_DINUMBER = :BTP_ASN_DINUMBER,
							B.QUANTITY = :QUANTITY
						WHERE 
						B.INVOICENUMBER_INVOICENUMBER = cur_rows.INVOICENUMBER
						AND B.INVOICENUMBER_HOUSEBOLNUMBER_ID = V_ID
						AND B.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = cur_rows.HOUSEBOLNUMBER
						AND B.LINENUMBER = cur_rows.LINENUMBER
						AND B.PURCHASEORDERNUMBER = cur_rows.PURCHASEORDERNUMBER;
		
						-- TT_MNET_STD = SELECT V_ID AS MNET_ID , 'E' As STATUS FROM DUMMY; 
						-- O_STATUS = 'E';
                        v_errFlag = TRUE;   
                
						SELECT  "MNetStatusMonitoring_ID".NEXTVAL INTO V_NEXTID  FROM DUMMY;           
						INSERT INTO "BTP_PANASONIC_MNETSTATUSMONITORING"           
							(CREATEDAT,ID,BOLID,HOUSEBOLNUMBER,INVOICENUMBER,CONTAINERID,DATE,OBJECTTYPE,STATUS,MESSAGE,IMPORTSHIPMENTNUMBER)           
						VALUES           
							(NOW(),V_NEXTID,V_ID,
							cur_rows.HOUSEBOLNUMBER,
							cur_rows.INVOICENUMBER,
							cur_rows.CONTAINERID,
							NOW(),'VALIDATION','E','GR already posted. Documents cannot be reversed on Invoice: ' || cur_rows.INVOICENUMBER || ' for Purchase Order: ' || V_PO || ' & OrderItem: ' || cur_rows.PURCHASEORDERITEM,V_IMPORTSHIPMENTNUMBER  );
                
						INSERT INTO "BTP_PANASONIC_MNETSTATUSMONITORINGITEM"
						(ID_ID,LINEID,LINENUMBER,MATERIAL,PURCHASEORDER,PURCHASEORDERITEM)
						Select 
						V_NEXTID AS ID_ID,
						Statuslineid,
						cur_rows.LINENUMBER,
						cur_rows.SUPPLIERPARTID,
						cur_rows.PURCHASEORDERNUMBER,
						cur_rows.PURCHASEORDERITEM
						FROM Dummy;
					END IF;
        
					IF (( BOL_FLAG_CHECK IS  NULL OR BOL_FLAG_CHECK != TRUE) AND 
						( :cur_rows.CONTAINERID = :CONTAINERID ) AND (CURRENT_INITIALDESTINATIONETA = :INITIALDESTINATIONETA_PREV) AND
                        ( ( :OUT_PREVIOUS_RECORD_EXISTING = TRUE AND HOLD_QUANTITY != :QUANTITY AND HOLD_QUANTITY > HOLD_SCHEDULELINEOPENQTY) OR  
						  ( :OUT_PREVIOUS_RECORD_EXISTING = FALSE AND HOLD_QUANTITY > HOLD_SCHEDULELINEOPENQTY) ) )
						-- ( V_CONID = :CONTAINERID ) AND (CURRENT_INITIALDESTINATIONETA = :INITIALDESTINATIONETA_PREV) AND        -- SIT3Optimization
						-- ( ( :OUT_PREVIOUS_RECORD_EXISTING = TRUE AND ( HOLD_QUANTITY > HOLD_SCHEDULELINEOPENQTY) )              -- SIT3Optimization
						-- OR																						               -- SIT3Optimization			   
						-- ( :OUT_PREVIOUS_RECORD_EXISTING = FALSE AND ( HOLD_QUANTITY > HOLD_SCHEDULELINEOPENQTY ) )		       -- SIT3Optimization
						-- ) ) 
					THEN

						--TT_MNET_STD = SELECT V_ID AS MNET_ID , 'E' As STATUS FROM DUMMY;
						-- O_STATUS = 'E';
                        v_errFlag = TRUE; 
   
						SELECT  "MNetStatusMonitoring_ID".NEXTVAL INTO V_NEXTID  FROM DUMMY;
						INSERT INTO "BTP_PANASONIC_MNETSTATUSMONITORING"
							(CREATEDAT,ID,BOLID,HOUSEBOLNUMBER,INVOICENUMBER,CONTAINERID,DATE,OBJECTTYPE,STATUS,MESSAGE,IMPORTSHIPMENTNUMBER)
						VALUES
							(NOW(),V_NEXTID,V_ID, 
							-- V_BOLNO,V_INVNO,V_CONID,
                            cur_rows.HOUSEBOLNUMBER,
							cur_rows.INVOICENUMBER,
							cur_rows.CONTAINERID,
							NOW(),'VALIDATION','E','Invoice Line Quantity: '|| cur_rows.quantity || ' is greater than Open quantity: ' || cur_rows.SCHEDULELINEOPENQTY,V_IMPORTSHIPMENTNUMBER );
           
						INSERT INTO "BTP_PANASONIC_MNETSTATUSMONITORINGITEM"
							(ID_ID,LINEID,LINENUMBER,MATERIAL,PURCHASEORDER,PURCHASEORDERITEM,QUANTITYINPURCHASEORDERUNIT)
						Select 
							V_NEXTID AS ID_ID,
							Statuslineid,
							cur_rows.LINENUMBER,
							cur_rows.SUPPLIERPARTID,
							cur_rows.PURCHASEORDERNUMBER,
							cur_rows.PURCHASEORDERITEM,
							cur_rows.quantity
							FROM Dummy;
					END IF; 
             
					IF ( IFNULL(cur_rows.PASCOriginalPartsNbr,'') != '' And V_POType = 'D')  THEN
            
						--TT_MNET_STD = SELECT V_ID AS MNET_ID , 'E' As STATUS FROM DUMMY;
						-- O_STATUS = 'E';
						v_errFlag = TRUE;

						SELECT  "MNetStatusMonitoring_ID".NEXTVAL INTO V_NEXTID  FROM DUMMY; 
						INSERT INTO "BTP_PANASONIC_MNETSTATUSMONITORING" 
							(CREATEDAT,ID,BOLID,HOUSEBOLNUMBER,INVOICENUMBER,CONTAINERID,DATE,OBJECTTYPE,STATUS,MESSAGE,IMPORTSHIPMENTNUMBER) 
						VALUES 
							(NOW(),V_NEXTID,V_ID,
							-- V_BOLNO,V_INVNO,V_CONID,
							cur_rows.HOUSEBOLNUMBER,
							cur_rows.INVOICENUMBER,
							cur_rows.CONTAINERID,
							NOW(),'VALIDATION','E','Parts Substitution is not allowed on DROP Ship Order: ' || V_PO || ' & OrderItem: ' || cur_rows.PURCHASEORDERITEM,V_IMPORTSHIPMENTNUMBER  );
                                                
						INSERT INTO "BTP_PANASONIC_MNETSTATUSMONITORINGITEM"
                            (ID_ID,LINEID,LINENUMBER,MATERIAL,PURCHASEORDER,PURCHASEORDERITEM)
						Select 
							V_NEXTID AS ID_ID,
							Statuslineid,
							cur_rows.LINENUMBER,
							cur_rows.SUPPLIERPARTID,
							cur_rows.PURCHASEORDERNUMBER,
							cur_rows.PURCHASEORDERITEM
						FROM Dummy;
					END IF;
        
					IF(IFNULL(cur_rows.PASCOriginalPartsNbr,'') = '' And (cur_rows.SUPPLIERPARTID) != (cur_rows.SUPPLIERMATERIALNUMBER) ) THEN
				
						--TT_MNET_STD = SELECT V_ID AS MNET_ID , 'E' As STATUS FROM DUMMY;
						-- O_STATUS = 'E';
						v_errFlag = TRUE;

						SELECT  "MNetStatusMonitoring_ID".NEXTVAL INTO V_NEXTID  FROM DUMMY;
				
						INSERT INTO "BTP_PANASONIC_MNETSTATUSMONITORING"
							(CREATEDAT,ID,BOLID,HOUSEBOLNUMBER,INVOICENUMBER,CONTAINERID,DATE,OBJECTTYPE,STATUS,MESSAGE,IMPORTSHIPMENTNUMBER)
						VALUES
							(NOW(),V_NEXTID,V_ID,
							-- V_BOLNO,V_INVNO,V_CONID,
							cur_rows.HOUSEBOLNUMBER,
							cur_rows.INVOICENUMBER,
							cur_rows.CONTAINERID,
							NOW(),'VALIDATION','E','Supplier Material: "' || cur_rows.SUPPLIERPARTID || '" is not found on PurchaseOrder: ' || V_PO || ' & OrderItem: ' || cur_rows.PURCHASEORDERITEM ,V_IMPORTSHIPMENTNUMBER );
                                                    
						INSERT INTO "BTP_PANASONIC_MNETSTATUSMONITORINGITEM"
							(ID_ID,LINEID,LINENUMBER,MATERIAL,PURCHASEORDER,PURCHASEORDERITEM)
							Select V_NEXTID AS ID_ID,
								Statuslineid,
								cur_rows.LINENUMBER,
								cur_rows.SUPPLIERPARTID,
								cur_rows.PURCHASEORDERNUMBER,
								cur_rows.PURCHASEORDERITEM
							FROM Dummy;
					END IF;    
            	
				END IF;			--INC0219526.n
                
				IF ( v_errFlag = TRUE ) THEN
					UPDATE BTP_PANASONIC_INVOICELINE AS B 
						SET B.STATUS = 'E' 
						WHERE B.INVOICENUMBER_INVOICENUMBER = cur_rows.INVOICENUMBER
						AND B.INVOICENUMBER_HOUSEBOLNUMBER_ID = V_ID 
						AND B.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = cur_rows.HOUSEBOLNUMBER
						AND B.LINENUMBER = cur_rows.LINENUMBER
						AND B.PURCHASEORDERNUMBER = cur_rows.PURCHASEORDERNUMBER;
                END IF;

				Statuslineid = Statuslineid + 1;

			END FOR;
			COMMIT;	
        END;
    ELSE
        --TT_MNET_STD = SELECT V_ID AS MNET_ID , 'E' As STATUS FROM DUMMY;
         O_STATUS = 'E';

		 IF EXISTS (SELECT TOP 1 T0.INVOICENUMBER_HOUSEBOLNUMBER_ID from BTP_PANASONIC_INVOICELINE As T0 Where T0.INVOICENUMBER_HOUSEBOLNUMBER_ID = V_ID And T0.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_BOL ) THEN
			SELECT  "MNetStatusMonitoring_ID".NEXTVAL INTO V_NEXTID  FROM DUMMY;

			INSERT INTO "BTP_PANASONIC_MNETSTATUSMONITORING"
			(CREATEDAT,ID,BOLID,HOUSEBOLNUMBER, DATE,OBJECTTYPE,STATUS,MESSAGE, IMPORTSHIPMENTNUMBER)
			VALUES
			(NOW(),V_NEXTID,V_ID,V_BOL,NOW(),'VALIDATION','E',CONCAT(' Error in Validation Routine USP_UPDATE_MNET_STATUS for Purchase Order: ', V_PO) , V_IMPORTSHIPMENTNUMBER);
        
			INSERT INTO "BTP_PANASONIC_MNETSTATUSMONITORINGITEM"
			(ID_ID,LINEID,LINENUMBER,MATERIAL,PURCHASEORDER,PURCHASEORDERITEM)
			Select 
			V_NEXTID AS ID_ID,
			ROW_NUMBER() OVER (ORDER BY T0.LINENUMBER ASC) AS LINEID,
        	T0.LINENUMBER,T0.SUPPLIERPARTID,T0.PURCHASEORDERNUMBER,T0.ORDERITEMNBR from BTP_PANASONIC_INVOICELINE As T0 
        	Where T0.INVOICENUMBER_HOUSEBOLNUMBER_ID  = V_ID And T0.INVOICENUMBER_HOUSEBOLNUMBER_HOUSEBOLNUMBER = V_BOL
        	And T0.PURCHASEORDERNUMBER = V_PO ; 
			-- This Condition should not occur
		 ELSE
			SIGNAL CASE_COND SET MESSAGE_TEXT = 'Error in Validation Routine USP_UPDATE_MNET_STATUS With E STATUS';
		 END IF;

    END IF;
 
 END	